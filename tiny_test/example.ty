use utils::sub;
use utils::{mult, div};

let global = 100;

fn avg a b => div(sub(a, b), 2);

fn add first second => first + second;

fn compute x y z => ( 2 * 3 * x + 5 * y - 3 * z ) / (1 + 3 + 2 * 2);

/// Test function
/// Takes a and b
/// Returns 15 + 4
/// ```
/// fn test a b => {
///    let var = 2 + 3
///    add(var * 3, 4)
/// }
/// ```
/// ```ty
/// let test = sub(2, 1); // simple comment
/// assert_eq(test, 1);
/// ```
pub fn test a b => {
    let var = a + b;
    return add(var * 3, 4); // line comment
}

/// An **arithmetic progression** or arithmetic sequence (_AP_) 
/// is a sequence of numbers such that the difference from any 
/// succeeding term to its preceding term remains constant throughout the sequence. 
/// The constant difference is called ~~common difference~~ of that arithmetic progression. 
/// 
/// For instance, the sequence 5, 7, 9, 11, 13, 15, . . . 
/// is an arithmetic progression with a common difference of 2
/// ```ty
/// let sum = sumOfSequence(5, 6, 2);
/// assert_eq(sum, 60);
/// ```
/// The sum of a finite arithmetic progression is called an arithmetic series.
pub fn sumOfSequence a n d => {
    n / 2 * (2 * a + (n - 1) * d)
}


fn test a b => {
    let var = 2 + 3
    add(var * 3, 4)
}