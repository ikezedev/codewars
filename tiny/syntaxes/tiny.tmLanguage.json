{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Tiny",
  "fileTypes": ["ty"],
  "scopeName": "source.ty",
  "patterns": [
    {
      "include": "#use_statement"
    },
    {
      "include": "#let_statement"
    },
    {
      "include": "#constants"
    },
    {
      "include": "#functions"
    },
    {
      "include": "#keywords"
    },
    {
      "include": "#variables"
    },
    {
      "include": "#comments"
    }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "comment": "documentation comments",
          "name": "meta.comments.documentation.tiny",
          "begin": "^\\s*///\\s*```(?:ty|tiny|)\\s*\\n",
          "beginCaptures": {
            "0": {
              "name": "comment.line.documentation.tiny"
            }
          },
          "end": "///\\s*```.*\\n(?!///)",
          "endCaptures": {
            "0": {
              "name": "comment.line.documentation.tiny"
            }
          },
          "patterns": [
            {
              "match": "^\\s*///",
              "name": "comment.line.documentation.tiny"
            },
            {
              "include": "#use_statement"
            },
            {
              "include": "#let_statement"
            },
            {
              "include": "#constants"
            },
            {
              "include": "#functions"
            },
            {
              "include": "#keywords"
            },
            {
              "include": "#variables"
            },
            {
              "comment": "line comments",
              "name": "comment.line.double-slash.tiny",
              "match": "\\s*//.*"
            }
          ]
        },
        {
          "comment": "documentation comments",
          "name": "comment.line.documentation.tiny",
          "match": "^\\s*///.*"
        },
        {
          "comment": "line comments",
          "name": "comment.line.double-slash.tiny",
          "match": "\\s*//.*"
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.tiny",
          "match": "\\b(if|while|for|return)\\b"
        },
        {
          "comment": "math operators",
          "name": "keyword.operator.math.tiny",
          "match": "(([+%]|(\\*(?!\\w)))(?!=))|(-(?!>))|(/(?<!//)(?!/))"
        },
        {
          "comment": "namespace operator",
          "name": "keyword.operator.namespace.tiny",
          "match": "::"
        },
        {
          "comment": "fn",
          "name": "keyword.other.fn.tiny",
          "match": "\\bfn\\b"
        },
        {
          "comment": "single equal",
          "name": "keyword.operator.assignment.equal.tiny",
          "match": "(?<![<>])=(?!=|>)"
        },
        {
          "comment": "storage keywords",
          "name": "keyword.other.let.tiny",
          "match": "\\b(let)\\b"
        },
        {
          "comment": "hashrocket, fat arrow",
          "name": "keyword.operator.arrow.fat.tiny",
          "match": "=>"
        },
        {
          "comment": "pub",
          "name": "keyword.other.pub.tiny",
          "match": "\\bpub\\b"
        },
        {
          "comment": "use",
          "name": "storage.modifier.use.tiny",
          "match": "\\buse\\b"
        }
      ]
    },
    "constants": {
      "patterns": [
        {
          "comment": "decimal integers and floats",
          "name": "constant.numeric.decimal.tiny",
          "match": "\\b\\d[\\d_]*(\\.?)[\\d_]*\\b",
          "captures": {
            "1": {
              "name": "punctuation.separator.dot.decimal.tiny"
            }
          }
        }
      ]
    },
    "functions": {
      "patterns": [
        {
          "comment": "function definition",
          "name": "meta.function.definition.tiny",
          "match": "\\b(fn)\\s+([A-Za-z0-9_]+)\\s*(.*)\\s*(=>)",
          "captures": {
            "1": {
              "name": "keyword.other.fn.tiny"
            },
            "2": {
              "name": "entity.name.function.tiny"
            },
            "3": {
              "patterns": [
                {
                  "match": "\\b([A-Za-z0-9_]+)\\b",
                  "captures": {
                    "1": {
                      "name": "variable.parameter.tiny"
                    }
                  }
                }
              ]
            },
            "4": {
              "name": "keyword.operator.arrow.fat.tiny"
            }
          }
        },
        {
          "comment": "function calls",
          "name": "meta.function.call.tiny",
          "begin": "([A-Za-z0-9_]+)(\\()",
          "beginCaptures": {
            "1": {
              "name": "entity.name.function.tiny"
            }
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "punctuation.brackets.round.tiny"
            }
          },
          "patterns": [
            { "include": "#constants" },
            { "include": "#keywords" },
            { "include": "#variables" }
          ]
        }
      ]
    },
    "use_statement": {
      "patterns": [
        {
          "comment": "use statement",
          "name": "meta.statement.use.tiny",
          "match": "\\b(use)\\s+(\\w+)(::)(?:(\\w+)|{\\s*(.*)\\s*})",
          "captures": {
            "1": {
              "name": "storage.modifier.use.tiny"
            },
            "2": {
              "name": "variable.parameter.tiny entity.name.module.tiny"
            },
            "3": {
              "name": "keyword.operator.namespace.tiny"
            },
            "4": {
              "name": "variable.parameter.tiny"
            },
            "5": {
              "patterns": [
                {
                  "match": "\\b([A-Za-z0-9_]+),?\\b",
                  "captures": {
                    "1": {
                      "name": "variable.parameter.tiny"
                    }
                  }
                }
              ]
            }
          }
        }
      ]
    },
    "let_statement": {
      "comment": "let statement",
      "name": "meta.let.definition.tiny",
      "match": "\\b(let)\\s+([a-z0-9_]+)\\s*(=)",
      "captures": {
        "1": {
          "name": "keyword.other.let.tiny"
        },
        "2": {
          "name": "variable.name.tiny"
        },
        "3": {
          "name": "keyword.operator.assignment.equal.tiny"
        }
      }
    },
    "variables": {
      "patterns": [
        {
          "comment": "variables",
          "name": "variable.other.tiny",
          "match": "\\b(?<!(?<!\\.)\\.)[a-z0-9_]+\\b"
        }
      ]
    }
  }
}
